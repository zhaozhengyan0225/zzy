
cd /etc/gitlab
sudo vi gitlab.rb

sudo gitlab-ctl reconfigure

sudo gitlab-ctl restart

#################
push
#################
git push <远程主机名> <本地分支名>:<远程分支名>
使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push
第一次推送master分支的所有内容 git push -u origin master
此后可以使用命令git push 推送最新修改；

如果省略本地分支名，则表示删除指定的远程分支
要一次推送所有本地新增的标签上去，可以使用 --tags 选项
git push origin :master 

#################
分支
#################
创建新分支：git branch branchName
切换到新分支：git checkout branchName
两个命令也可以合成为一个命令：
git checkout -b branchName


####################
合并
####################
当前所在分支与<本地分支名>进行合并
git merge <本地分支名>

#######################
#在一个项目下添加多个远程仓库
#######################
#查看远程库状态
git remote

#删除远程分支
git remote rm origin

#将原有远程库改名
git remote rename origin old-origin

#添加新的远程库
git remote add origin git@192.168.0.22:sunguangyang/zhikongMethod.git

#######################
#标签
#######################
用 -a （译注：取 annotated 的首字母）指定标签名字即可
-m 选项则指定了对应的标签说明
git tag -a v1.4 -m 'my version 1.4'

git tag -d v1.4　　　　　　　　//本地删除tag


#######################
#删除
#######################
#删除工作区文件
git rm -r a

#删除仓库中文件
git rm -r --cached a/2.txt //删除a目录下的2.txt文件   
git rm -r --cached a //删除a目录

git commit -m "删除a目录下的2.txt文件" 

git push

#######################
#版本回退
#######################

git reset --hard {commit id}
#回退到上一版本
git reset --hard HEAD^

#回退到上两个版本
git reset --hard HEAD^^

#打印git命令记录
git reflog（行首记录每条命令的commit id）


